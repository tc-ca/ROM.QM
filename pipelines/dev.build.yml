trigger:
- development

pool:
  vmImage: 'ubuntu-latest'

variables: 
  QMSolutionName: 'QM.Core'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

- task: MSCRMToolInstaller@12
  inputs:
    nugetFeed: 'official'
    psFeed: 'official'
- task: MSCRMCreatePatch@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    uniqueName: '$(QM.Core)'
    displayName: '$(QM.Core)_patch_$(ProductVersion)'
    versionNumber: '$(ProductVersion)'

- task: MSCRMGetLatestPatch@12
  name: GetLatestPatchTask
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(QM.Core)'
    existsVariableName: '$(PatchExists)'
    patchVariableName: '$(PatchName)'
- powershell: |
    Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
    Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
    Write-Host "Patch Version =  $(PatchVersion)"
    Write-Host "Product Version =  $(ProductVersion)"
    Write-Host "Patch Exists =  $(PatchExists)"
    Write-Host "Latest Patch Name =  $(LatestPatchName)"
    Write-Host "${{ eq('$(PatchExists)', 'False') }}"
    Write-Host variables['task.GetLatestPatchTask.PatchExists']

- task: MSCRMExportSolution@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(LatestPatchName)'
    exportManaged: false
    exportUnmanaged: true
    outputPath: '$(Build.ArtifactStagingDirectory)\$(QM.Core)'

- task: CopyFiles@2
  inputs:
    Contents: 'dist/**' # Pull the build directory (Vue)
    TargetFolder: '$(Build.ArtifactStagingDirectory)\$(QM.Core)\WebResources'

- task: MSCRMPackSolution@12
  inputs:
    unpackedFilesFolder: '$(Build.ArtifactStagingDirectory)\$(QM.Core)'
    packageType: 'Managed'
    outputPath: '$(Build.ArtifactStagingDirectory)\Solutions'
    sourceLoc: '(Build.ArtifactStagingDirectory)\Solutions'
    localize: true

- task: MSCRMImportSolution@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionFile: '$(Build.ArtifactStagingDirectory)\Solutions\$(PatchName)'
    publishWorkflows: true
    holdingSolution: true
    override: true

- task: MSCRMApplySolution@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(QM.Core)'
    useAsyncMode: true
- task: PublishBuildArtifacts@1
  inputs: 
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' # dist or build files
    ArtifactName: 'www' # output artifact named www