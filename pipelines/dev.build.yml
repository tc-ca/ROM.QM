trigger:
- development
stages:
- stage: A
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - script: |
        npm install
        npm run build
        npm run test:unit
      displayName: 'npm install and build'
    - powershell: |
        Write-Host "Current directory file list post build"
        dir
        Write-Host "Build Artifacts staging directory"
        Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'WebResources'
        publishLocation: 'Container'
  # - deployment: Deploy
  #   condition: succeeded()
  #   dependsOn: Build
  #   pool:
  #     vmImage: 'vs2017-win2016'
  #   environment: DEV
  #   strategy:
  #     runOnce:
  #       deploy:
  - job: Deploy
    condition: succeeded()
    continueOnError: true
    dependsOn: Build
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: PowerShell@2
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Agent.BuildDirectory"
          Write-Host "$(Build.ArtifactStagingDirectory)"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
        errorActionPreference: 'continue'
    - task: MSCRMToolInstaller@12
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      continueOnError: true
      inputs:
        crmConnectionString: '$(ConnectionDev)'
        solutionName: '$(CoreSolutionName)'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
    - task: MSCRMExportSolution@12
      inputs:
        crmConnectionString: '$(ConnectionDev)'
        solutionName: '$(LatestPatchName)'
        exportManaged: false
        exportUnmanaged: true
        outputPath: '$(Build.ArtifactStagingDirectory)'
    - task: MSCRMExtractSolution@12
      inputs:
        unpackedFilesFolder: '$(Build.ArtifactStagingDirectory)'
        solutionFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName).zip'
    - powershell: |
        Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '0e26be07-8156-4953-b64e-80a4ed8a33f3'
        pipeline: '409'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'WebResources'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: PowerShell@2
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Build.ArtifactStagingDirectory"
          Write-Host "Pipeline.Workspace"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Get-ChildItem -Path "$(System.ArtifactsDirectory)"
        errorActionPreference: 'continue'
    - task: MSCRMPackSolution@12
      inputs:
        unpackedFilesFolder: '$(Build.ArtifactStagingDirectory)'
        outputPath: '$(Build.ArtifactStagingDirectory)'
        localize: false
    - powershell: |
        Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
    - task: MSCRMImportSolution@12
      inputs:
        crmConnectionString: '$(ConnectionDev)'
        solutionFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName).zip'
        publishWorkflows: true
        holdingSolution: false
    #     override: true
    # - task: MSCRMApplySolution@12
    #   inputs:
    #     crmConnectionString: '$(ConnectionDev)'
    #     solutionName: '$(LatestPatchName)'
    #     useAsyncMode: true