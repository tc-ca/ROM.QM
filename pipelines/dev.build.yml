trigger:
- development
stages:
- stage: A
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - powershell: |
        Write-Host "Current directory file list pre build"
        dir
    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'
    - powershell: |
        Write-Host "Current directory file list post build"
        dir
        Write-Host "Build Artifacts staging directory"
        Write-Host "$(Build.ArtifactStagingDirectory)"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'dist'
        artifact: 'QM_' #should be named after web resource prefix 
        publishLocation: 'pipeline'
  - deployment: Deploy
    condition: succeeded()
    dependsOn: Build
    pool:
      vmImage: 'vs2017-win2016'
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: MSCRMGetLatestPatch@12
            name: GetLatestPatchTask
            inputs:
              crmConnectionString: '$(ConnectionDev)'
              solutionName: '$(CoreSolutionName)'
              existsVariableName: 'PatchExists'
              patchVariableName: 'LatestPatchName'
          - powershell: |
              Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
              Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
              Write-Host "Patch Exists =  $(PatchExists)"
          - powershell: |
              Write-Host "Current Directory"
              dir
              Write-Host "Build Agent Directory $(Agent.BuildDirectory)"
          - powershell: |
              If(!(test-path '$(Build.BuildDirectory)\$(LatestPatchName)'))
              {
                Write-Host "$(Build.BuildDirectory)\$(LatestPatchName) folder does not exists."
                New-Item -ItemType Directory -Force -Path '$(Build.BuildDirectory)\$(LatestPatchName)'
                Write-Host "$(Build.BuildDirectory)\$(LatestPatchName) folder created."
              }
          - task: MSCRMExportSolution@12
            inputs:
              crmConnectionString: '$(ConnectionDev)'
              solutionName: '$(LatestPatchName)'
              exportManaged: false
              exportUnmanaged: true
              outputPath: '$(Build.BuildDirectory)\$(LatestPatchName)'
          - task: CopyFiles@2
            inputs:
              Contents: 'dist/**' # Pull the build directory (Vue)
              TargetFolder: '$(Build.BuildDirectory)\$(LatestPatchName)\WebResources'
          - powershell: |
              If(!(test-path '$(Build.BuildDirectory)\$(LatestPatchName)\Solutions'))
              {
                Write-Host "$(Build.BuildDirectory)\$(LatestPatchName)\Solutions folder does not exists."
                New-Item -ItemType Directory -Force -Path '$(Build.BuildDirectory)\$(LatestPatchName)\Solutions'
                Write-Host "$(Build.BuildDirectory)\$(LatestPatchName)\Solutions folder created."
              }
          - task: MSCRMPackSolution@12
            inputs:
              unpackedFilesFolder: '$(Build.BuildDirectory)\$(LatestPatchName)'
              packageType: 'Managed'
              outputPath: '$(Build.BuildDirectory)\$(LatestPatchName)\Solutions'
              sourceLoc: 'auto'
              localize: true
          - task: MSCRMImportSolution@12
            inputs:
              crmConnectionString: '$(ConnectionDev)'
              solutionFile: '$(Build.BuildDirectory)\$(LatestPatchName)\Solutions\$(LatestPatchName).zip'
              publishWorkflows: true
              holdingSolution: false
          #     override: true
          # - task: MSCRMApplySolution@12
          #   inputs:
          #     crmConnectionString: '$(ConnectionDev)'
          #     solutionName: '$(LatestPatchName)'
          #     useAsyncMode: true
          - task: CopyFiles@2
            inputs:
              Contents: '$(Build.BuildDirectory)\$(LatestPatchName)\Solutions\**'
              TargetFolder: '$(Build.SourcesDirectory)\$(LatestPatchName)\WebResources'
