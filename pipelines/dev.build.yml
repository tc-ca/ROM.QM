trigger:
- development
stages:
- stage: A
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - powershell: |
        Write-Host "Current directory file list pre build"
        dir
    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'
    - powershell: |
        Write-Host "Current directory file list post build"
        dir
        Write-Host "Build Artifacts staging directory"
        Write-Host "$(Build.ArtifactStagingDirectory)"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'dist'
        artifact: 'www'
        publishLocation: 'pipeline'
  - deployment: Deploy
    condition: succeeded()
    dependsOn: Build
    pool:
      vmImage: 'vs2017-win2016'
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: MSCRMGetLatestPatch@12
            name: GetLatestPatchTask
            inputs:
              crmConnectionString: '$(ConnectionDev)'
              solutionName: '$(CoreSolutionName)'
              existsVariableName: 'PatchExists'
              patchVariableName: 'LatestPatchName'
          - powershell: |
              Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
              Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
              Write-Host "Patch Exists =  $(PatchExists)"
              Write-Host "Latest Patch Name =  $(LatestPatchName)"
              Write-Host "${{ eq('$(PatchExists)', 'False') }}"
          - powershell: 
            displayName: Debug Information
              |
              Write-Host "Current Directory"
              dir
              Write-Host "Build Agent Directory $(Agent.BuildDirectory)"
          # - task: DownloadBuildArtifacts@0
          #   inputs:
          #     buildType: 'current'
          #     downloadType: 'single'
          #     artifactName: 'www'
          #     downloadPath: '$(Agent.BuildDirectory)'
          - task: MSCRMUpdateWebResource@12
            inputs:
              crmConnectionString: '$(ConnectionDev)'
              webResourceDeploymentType: 'folderPath'
              webResourceFolderPath: '$(Agent.BuildDirectory)'
              searchPattern: '*.html,*.htm,*.js,*.css,*.png,*.jpeg, *.ico'
              publish: true
              solutionName: '$(LatestPatchName)'
              crmConnectionTimeout: 360
          # - powershell: |
          #     If(!(test-path '$(Build.ArtifactStagingDirectory)\$(CoreSolutionName)'))
          #     {
          #       Write-Host "$(Build.ArtifactStagingDirectory)\$(CoreSolutionName) folder does not exists."
          #       New-Item -ItemType Directory -Force -Path '$(Build.ArtifactStagingDirectory)\$(CoreSolutionName)'
          #       Write-Host "$(Build.ArtifactStagingDirectory)\$(CoreSolutionName) folder created."
          #     }
          # - task: MSCRMExportSolution@12
          #   inputs:
          #     crmConnectionString: '$(ConnectionDev)'
          #     solutionName: '$(LatestPatchName)'
          #     exportManaged: false
          #     exportUnmanaged: true
          #     outputPath: '$(Build.ArtifactStagingDirectory)\$(CoreSolutionName)'
          # - task: CopyFiles@2
          #   inputs:
          #     Contents: 'dist/**' # Pull the build directory (Vue)
          #     TargetFolder: '$(Build.ArtifactStagingDirectory)\$(CoreSolutionName)\WebResources'
          # - task: MSCRMPackSolution@12
          #   inputs:
          #     unpackedFilesFolder: '$(Build.ArtifactStagingDirectory)\$(CoreSolutionName)'
          #     packageType: 'both'
          #     outputPath: '$(Build.SourcesDirectory)\$(CoreSolutionName)'
          #     sourceLoc: 'auto'
          #     localize: true
          # - task: MSCRMImportSolution@12
          #   inputs:
          #     crmConnectionString: '$(ConnectionDev)'
          #     solutionFile: '$(Build.ArtifactStagingDirectory)\$(PatchName)'
          #     publishWorkflows: true
          #     holdingSolution: true
          #     override: true
          # - task: MSCRMApplySolution@12
          #   inputs:
          #     crmConnectionString: '$(ConnectionDev)'
          #     solutionName: '$(QMCore)'
          #     useAsyncMode: true